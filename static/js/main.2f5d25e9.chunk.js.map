{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Pomodoro","useState","isTimerRunning","setIsTimerRunning","focusTimer","setFocusTimer","breakTimer","setBreakTimer","currentTimer","setCurrentTimer","isFocus","setFocus","percent","setPercent","progress","setProgress","percentCounter","setPercentCounter","progressVisibility","setProgressVisibility","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","previous","Audio","process","play","data-testid","type","onClick","disabled","name","role","aria-label","title","prevState","oi","givenSeconds","seconds","round","secondsToDuration","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f5d25e9.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  \n  const [isTimerRunning, setIsTimerRunning] = useState(false);  \n  const [focusTimer,setFocusTimer] = useState(25);\n  const [breakTimer,setBreakTimer] = useState(5);\n  const [currentTimer,setCurrentTimer] = useState(focusTimer*60);\n  const [isFocus,setFocus] = useState(true);\n  const [percent,setPercent] = useState((focusTimer*60)/100);\n  const [progress,setProgress] = useState(0);\n  const [percentCounter,setPercentCounter] = useState(1);\n  const [progressVisibility,setProgressVisibility] = useState(false);\n  \n  \n\n    const focusTimerIncrement = () => {\n      if(focusTimer < 60 && focusTimer >= 5 ) {\n        setCurrentTimer((focusTimer+5)*60);\n      setFocusTimer(focusTimer+5) \n      setPercent((focusTimer*60)/100)  \n      } \n    };    \n    const focusTimerDecrement = () => {\n      \n      if(focusTimer > 5 && focusTimer <= 60) {\n        setCurrentTimer((focusTimer-5)*60)\n      setFocusTimer(focusTimer-5)\n      setPercent((focusTimer*60)/100)\n      }\n\n    };\n    const breakTimerIncrement = () => {\n      if(breakTimer < 15) {\n      setBreakTimer(breakTimer+1)\n      \n      }\n    };\n    const breakTimerDecrement = () => {\n      if(breakTimer > 1) {\n      setBreakTimer(breakTimer-1)\n      }\n    };\n    const stopButton = () => {\n      setCurrentTimer(focusTimer*60)\n      setIsTimerRunning(false);\n      setProgress(0);\n      setFocus(true);\n      setPercentCounter(0)\n      setProgressVisibility(false)\n    }\n    \n\n  useInterval(\n    () => {\n      setPercentCounter((previous) => previous +1)\n      if((percentCounter  + (percent - Math.floor(percent))) >= percent) {\n        \n        setProgress((previous) => previous + 1);\n       setPercentCounter(1);\n      }\n      \n      \n      \n      setCurrentTimer(currentTimer -1)\n      if(currentTimer == 1 && isFocus == true  ) {\n        new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`).play();\n        setCurrentTimer(breakTimer*60);\n        setFocus((previous) => !previous);\n        setPercent((breakTimer*60)/100);\n        setPercentCounter(1);\n        setProgress(0)\n      }\n      else if(currentTimer == 1 && isFocus == false) {\n        new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`).play();\n        setCurrentTimer(focusTimer*60);\n        setFocus((previous) => !previous);\n        setPercent((focusTimer*60)/100);\n        setPercentCounter(1);\n        setProgress(0)\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n    setProgressVisibility(true)\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              Focus Duration: {minutesToDuration(focusTimer)}\n              \n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                onClick={focusTimerDecrement}\n                disabled={isTimerRunning}\n\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              \n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"                \n                onClick={focusTimerIncrement}\n                disabled={isTimerRunning}\n\n              >\n                <span className=\"oi oi-plus\" name=\"focusTime\"/>\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(breakTimer)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick={breakTimerDecrement}\n\n                  disabled={isTimerRunning}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  onClick={breakTimerIncrement}\n                  disabled={isTimerRunning}\n\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={stopButton}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className={classNames({\n        \"d-none\":!progressVisibility})}>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">{isFocus ? \"Focusing\" : \"On Break\"} for {isFocus ? minutesToDuration(focusTimer) : minutesToDuration(breakTimer)} minutes</h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(currentTimer)} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow= {progress} // TODnO: Increase aria-valuenow as elapsed time increases\n                style={{ width: (progress + \"%\") }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}